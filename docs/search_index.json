[["index.html", "LendingTree Business Case: Marketplace Optimization 1 Executive Summary 1.1 Marketing 1.2 Product Monetization", " LendingTree Business Case: Marketplace Optimization Rena Marrotta 2024-02-12 1 Executive Summary 1.1 Marketing 1.1.1 Leverage High-Performing Channels and Reducing Reliance on Lower-Yield Ones Focus future marketing investments in social media and brand marketing to increase overall leads and revenue. Increase visibility, engagement, and relevance of the display and offline channels to leverage their revenue potential. Integrate digital touchpoints into the offline marketing channel. 1.1.1.1 Key Findings Underutilization of marketing channels with high revenue and/or high conversion rates: The social channel is the highest-performing channel, both by revenue and by conversion rate, but it makes up only 1% of the overall marketing portfolio. Social has an average revenue of $87.69 per session and a conversation rate of 38%. The display channel generates an average revenue of $50.36 but makes only 7% of the overall portfolio and has the second-lowest conversion rate at 12%. Brand marketing has the second-highest conversion rate at 27% but only makes up 2% of the overall marketing portfolio. Overutilization of marketing channels with lower conversion rates and medium-to-low revenue averages. Partner marketing makes up 27% of the marketing portfolio but has the third-lowest revenue per session at $26.17 and a relatively low conversion rate of 12%. The offline channel generates an average revenue of $41.25 and makes up 19% of the overall marketing portfolio by session but has the lowest conversion rate at 2%. 1.2 Product Monetization 1.2.1 Diversifying Product Portfolio Composition with Focus on Business Loans and Home Equity Invest in display channel marketing to target home equity and mortgage loan customers Enhance strategies to identify potential business loan, home equity, and mortgage loan customers 1.2.2 Key Findings: Opportunity to diversify product composition, particularly focusing on business loans and home equity, as a strategy to drive revenue growth: Personal loans make up 66% of the total products by referrals but are the second-lowest average revenue generator at $12.41 per lead. Business loans generate the highest average revenue at $198.35 but only makeup 2% of the product portfolio. Home equity products generate the second-highest average revenue at $80.72 but only makeup 9% of the product portfolio. "],["data-pre-processing.html", "2 Data Pre-Processing", " 2 Data Pre-Processing Libraries library(readxl) library(dplyr) library(tidyr) Load in sheets of the excel file file_path &lt;- &quot;/Users/renamarrotta/Documents/IAA/Analytics Business Case Data (1).xlsx&quot; sheets = c(&quot;sessions&quot;, &quot;marketing_details&quot;, &quot;leads&quot;, &quot;product_details&quot;, &quot;matches&quot;) for (i in 1:length(sheets)) { sheet_name &lt;- sheets[i] df &lt;- read_excel(file_path, sheet = sheet_name) assign(sheet_name, df) } rm(df) #Marketing &amp; Conversion ##Evaluating Marketing Channel Value Based on my understanding, each session should be associated with clicks. To check my understanding, I will analyze how many matching sessions ids and click session ids there are. The purpose of this is so I can match each session and its associated marketing strategy with a lead to understand which marketing strategies have the most leads associated. matching_rows_leads &lt;- leads[leads$CLICK_SESSION_ID %in% sessions$SESSION_ID, ] length(unique(matching_rows_leads$CLICK_SESSION_ID)) #16185 unique ids ## [1] 16185 #there are 19307 matching ids which equals the # of observations in leads #this makes sense so out of the 113854 sessions, 19307 turned into leads matching_rows_ses &lt;- sessions[sessions$SESSION_ID %in% leads$CLICK_SESSION_ID, ] #16296 obs #There are some ids in sessions that do not have a matching click_session_id Of these matching IDs, I want to see how many repeat in leads and if there are any repeating ids in sessions. I except there will be repeating click_session_ids because for every session it makes sense to have multiple clicks. I do not expect any repeating session_ids. click_session_id_counts &lt;- table(matching_rows_leads$CLICK_SESSION_ID) #count occurances for each ID repeating_click_session_ids &lt;- names(click_session_id_counts)[click_session_id_counts &gt; 1] #2587 repeat - click sessions repeat session_id_counts &lt;- table(sessions$SESSION_ID) repeating_session_ids &lt;- names(session_id_counts)[session_id_counts &gt; 1] #146 repeat - session ids repeating_sessions_df &lt;- sessions %&gt;% filter(SESSION_ID %in% repeating_session_ids) sessions_clean &lt;- sessions %&gt;% filter(!(SESSION_ID %in% repeating_session_ids)) sessions_clean_counts &lt;- table(sessions_clean$SESSION_ID) sessions_clean_ids &lt;- names(sessions_clean_counts)[sessions_clean_counts &gt; 1] #empty - dropped the 146 repeating ids #clear environemnt rm(click_session_id_counts, repeating_click_session_ids, session_id_counts, repeating_session_ids, matching_rows_leads) rm(sessions_clean_counts, sessions_clean_ids, sheet_name) To ensure I can have a 1:many join, I dropped the 146 repeating ids. These 146 observations are some sessions that were exposed to two marketing strategies; these will have to be analyzed differently than those that follow the expected pattern of 1 session_id to many click_session_ids any(is.na(sessions_clean$marketing_ID)) ## [1] FALSE any(is.na(sessions_clean$SESSION_ID)) ## [1] FALSE leads_sessions_join &lt;- inner_join(leads, sessions_clean, by = c(&quot;CLICK_SESSION_ID&quot; = &quot;SESSION_ID&quot;)) #19085 obs with 4 vars any(is.na(leads_sessions_join$marketing_ID)) ## [1] FALSE I now want to know which marketing strategy and product is associated with each session and lead. any(is.na(marketing_details$CHANNEL)) ## [1] FALSE any(is.na(leads_sessions_join)) ## [1] FALSE marketing_leads &lt;- left_join(leads_sessions_join, marketing_details, by = &quot;marketing_ID&quot;) any(is.na(marketing_leads$CHANNEL)) ## [1] FALSE To understand how much value each marketing channel brings, I have to join the marketing_leads with matches. However, matches has 58602 rows which may indicate the lead_id repeats in this table. lead_id_count &lt;- table(matches$LEAD_ID) #count occurances for each ID repeating_lead_ids &lt;- names(lead_id_count)[lead_id_count &gt; 1] length(repeating_lead_ids) #13,236 repeating id&#39;s ## [1] 13236 matching_rows &lt;- marketing_leads[marketing_leads$LEAD_ID %in% matches$LEAD_ID, ] repeating_match &lt;- matching_rows$LEAD_ID %in% repeating_lead_ids #are the leads that repeat in the table I want to join? sum(repeating_match) ## [1] 13126 ref_id_count &lt;- table(matches$REFERRAL_ID) repeating_ref_ids &lt;- names(ref_id_count)[ref_id_count &gt; 1] length(repeating_ref_ids) #0 repeating id&#39;s ## [1] 0 It looks like one lead can be associated with multiple matches and every referral is unique. A single lead can be associated with multiple referrals. I have a 1:many relationship with lead_id when joining marketing_leads and matches. matching_rows_leads &lt;- matches[matches$LEAD_ID %in% marketing_leads$LEAD_ID, ] #58102 matches which means about 500 LEAD_IDs in matches do not have a corresponding marketing_leads LEAD_ID marketing_matches &lt;- inner_join(matches, marketing_leads, by = &quot;LEAD_ID&quot;) any(is.na(marketing_matches$CHANNEL)) ## [1] FALSE #58102 rows "],["marketing-channel-analysis.html", "3 Marketing Channel Analysis", " 3 Marketing Channel Analysis To understand what are the most profitable strategies, I calculate total revenue by marketing channel. marketing_matches %&gt;% group_by(CHANNEL) %&gt;% summarise(Revenue = sum(REVENUE)) %&gt;% arrange(desc(Revenue)) ## # A tibble: 8 × 2 ## CHANNEL Revenue ## &lt;chr&gt; &lt;dbl&gt; ## 1 SEM 171162. ## 2 Partner Marketing 102103. ## 3 CRM 81099. ## 4 Social 50686. ## 5 Display 44316. ## 6 SEO 32686. ## 7 Offline 21409. ## 8 Brand Marketing 18327. marketing_matches %&gt;% group_by(SUB_CHANNEL) %&gt;% summarise(Revenue = sum(REVENUE)) %&gt;% arrange( desc(Revenue)) ## # A tibble: 9 × 2 ## SUB_CHANNEL Revenue ## &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;NA&gt; 167442. ## 2 Non-Brand 155182. ## 3 Performance Marketing 82159. ## 4 Promo 67852. ## 5 Brand 15980. ## 6 Trigger 13229. ## 7 Media Partnerships 12119. ## 8 Native 4710. ## 9 Business Development 3116. Total revenue informs the overall revenue contribution of each channel. I also calculate revenue per session to account for variations in session volume per market channel. This metric is more informative when evaluating which channel is more effective at converting customer interactions to a revenue calculation since it is standardized. marketing_matches %&gt;% group_by(CHANNEL) %&gt;% summarise(Revenue_PerSession = sum(REVENUE)/n_distinct(CLICK_SESSION_ID)) %&gt;% # number of sessions per channel arrange(desc(Revenue_PerSession)) ## # A tibble: 8 × 2 ## CHANNEL Revenue_PerSession ## &lt;chr&gt; &lt;dbl&gt; ## 1 Social 87.7 ## 2 Display 50.4 ## 3 Offline 41.3 ## 4 SEM 36.4 ## 5 Brand Marketing 33.6 ## 6 Partner Marketing 26.2 ## 7 CRM 25.2 ## 8 SEO 18.9 marketing_matches %&gt;% group_by(SUB_CHANNEL) %&gt;% summarise(Revenue_PerSession = sum(REVENUE)/n_distinct(CLICK_SESSION_ID)) %&gt;% # number of sessions per channel arrange(desc(Revenue_PerSession)) ## # A tibble: 9 × 2 ## SUB_CHANNEL Revenue_PerSession ## &lt;chr&gt; &lt;dbl&gt; ## 1 Native 118. ## 2 Media Partnerships 70.9 ## 3 &lt;NA&gt; 39.4 ## 4 Non-Brand 37.5 ## 5 Brand 28.4 ## 6 Trigger 26.3 ## 7 Promo 24.9 ## 8 Performance Marketing 23.2 ## 9 Business Development 20.2 See which each channel is made up of by sub-channel market_prod_matches &lt;- inner_join(marketing_matches, product_details, by = &quot;PRODUCT_ID&quot;) #full data set with all leads, revenue, products, and marketing channel_subchannel_counts &lt;- market_prod_matches %&gt;% group_by(CHANNEL, SUB_CHANNEL) %&gt;% summarise(Product_Count = n()) %&gt;% ungroup() ## `summarise()` has grouped output by &#39;CHANNEL&#39;. You can override using the ## `.groups` argument. # Calculate the total occurrences of each subchannel within each channel total_subchannel_counts &lt;- channel_subchannel_counts %&gt;% group_by(CHANNEL) %&gt;% summarise(Total_Subchannel_Count = sum(Product_Count)) # Calculate proportions channel_subchannel_counts %&gt;% left_join(total_subchannel_counts, by = &quot;CHANNEL&quot;) %&gt;% mutate(Proportion = Product_Count / Total_Subchannel_Count)%&gt;% arrange(CHANNEL, desc(Proportion)) ## # A tibble: 14 × 5 ## CHANNEL SUB_CHANNEL Product_Count Total_Subchannel_Count Proportion ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Brand Marketing &lt;NA&gt; 2373 2373 1 ## 2 CRM Promo 11385 13284 0.857 ## 3 CRM Trigger 1898 13284 0.143 ## 4 CRM &lt;NA&gt; 1 13284 0.0000753 ## 5 Display &lt;NA&gt; 2321 2321 1 ## 6 Offline &lt;NA&gt; 2260 2260 1 ## 7 Partner Marketing Performanc… 11106 12326 0.901 ## 8 Partner Marketing Media Part… 558 12326 0.0453 ## 9 Partner Marketing Business D… 550 12326 0.0446 ## 10 Partner Marketing Native 112 12326 0.00909 ## 11 SEM Non-Brand 14199 16584 0.856 ## 12 SEM Brand 2385 16584 0.144 ## 13 SEO &lt;NA&gt; 6575 6575 1 ## 14 Social &lt;NA&gt; 2379 2379 1 Analyze the proportion of each marketing channel in all sessions sessions_clean_marketing &lt;- inner_join(sessions, marketing_details, by = &quot;marketing_ID&quot;) options(scipen = 999) total_sessions &lt;- nrow(sessions_clean_marketing) sessions_clean_marketing %&gt;% group_by(CHANNEL) %&gt;% summarise(rows_by_channel = n()) %&gt;% mutate(Proportion = rows_by_channel / total_sessions)%&gt;% arrange(desc(Proportion)) ## # A tibble: 9 × 3 ## CHANNEL rows_by_channel Proportion ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Partner Marketing 31255 0.275 ## 2 SEM 22375 0.197 ## 3 Offline 21444 0.188 ## 4 SEO 13899 0.122 ## 5 CRM 13804 0.121 ## 6 Display 7465 0.0656 ## 7 Brand Marketing 2071 0.0182 ## 8 Social 1539 0.0135 ## 9 Offline Direct Response 2 0.0000176 To further explore which marketing channels are better at converting sessions to leads I want to calculate the conversion rate per marketing channel. I first filter for only sessions that do not have a lead_id associated with it and count the total number of occurences for each marketing channel. lead_ids &lt;- unique(marketing_matches$CLICK_SESSION_ID) #16079 no_leads &lt;- sessions_clean %&gt;% filter(!(SESSION_ID %in% lead_ids)) #97478 sessions that did not turn into leads #join on marketing id to get marketing information for sessions that did not turn into leads no_leads &lt;- inner_join(no_leads, marketing_details, by = &quot;marketing_ID&quot;) nonconverted_counts &lt;- no_leads %&gt;% group_by(CHANNEL) %&gt;% summarise(n_marketing_nonc = n()) %&gt;% arrange(desc(n_marketing_nonc)) nonconverted_counts ## # A tibble: 9 × 2 ## CHANNEL n_marketing_nonc ## &lt;chr&gt; &lt;int&gt; ## 1 Partner Marketing 27330 ## 2 Offline 20846 ## 3 SEM 17653 ## 4 SEO 12081 ## 5 CRM 10517 ## 6 Display 6585 ## 7 Brand Marketing 1503 ## 8 Social 961 ## 9 Offline Direct Response 2 Then I filter for sessions that have an associated lead_id indicating the session successfully converted into a lead and count the total number of occurences for each marketing channel. yes_leads &lt;- sessions_clean %&gt;% filter(SESSION_ID %in% lead_ids) #16079 sessions that converted to leads yes_leads &lt;- inner_join(yes_leads, marketing_details, by = &quot;marketing_ID&quot;) converted_counts &lt;- yes_leads %&gt;% group_by(CHANNEL) %&gt;% summarise(n_marketing_c = n()) %&gt;% arrange(desc(n_marketing_c)) converted_counts ## # A tibble: 8 × 2 ## CHANNEL n_marketing_c ## &lt;chr&gt; &lt;int&gt; ## 1 SEM 4699 ## 2 Partner Marketing 3902 ## 3 CRM 3224 ## 4 SEO 1732 ## 5 Display 880 ## 6 Social 578 ## 7 Brand Marketing 545 ## 8 Offline 519 Using these calculations, I can now calculate a conversion rate for each marketing channel. full_join(converted_counts, nonconverted_counts, by = &quot;CHANNEL&quot;) %&gt;% mutate(conversion_rate = n_marketing_c / (n_marketing_c + n_marketing_nonc)) %&gt;% #converted count / total count arrange(desc(conversion_rate)) # Sort by conversion rate ## # A tibble: 9 × 4 ## CHANNEL n_marketing_c n_marketing_nonc conversion_rate ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Social 578 961 0.376 ## 2 Brand Marketing 545 1503 0.266 ## 3 CRM 3224 10517 0.235 ## 4 SEM 4699 17653 0.210 ## 5 SEO 1732 12081 0.125 ## 6 Partner Marketing 3902 27330 0.125 ## 7 Display 880 6585 0.118 ## 8 Offline 519 20846 0.0243 ## 9 Offline Direct Response NA 2 NA Comparing % of channels in converted sessions and non converted sessions options(scipen = 999) total_sessions &lt;- nrow(yes_leads) yes_leads %&gt;% group_by(CHANNEL) %&gt;% summarise(rows_by_channel = n()) %&gt;% mutate(Proportion_of_YesLeads = rows_by_channel / total_sessions)%&gt;% arrange(desc(Proportion_of_YesLeads)) ## # A tibble: 8 × 3 ## CHANNEL rows_by_channel Proportion_of_YesLeads ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 SEM 4699 0.292 ## 2 Partner Marketing 3902 0.243 ## 3 CRM 3224 0.201 ## 4 SEO 1732 0.108 ## 5 Display 880 0.0547 ## 6 Social 578 0.0359 ## 7 Brand Marketing 545 0.0339 ## 8 Offline 519 0.0323 options(scipen = 999) total_sessions &lt;- nrow(no_leads) no_leads %&gt;% group_by(CHANNEL) %&gt;% summarise(rows_by_channel = n()) %&gt;% mutate(Proportion_of_NoLeads = rows_by_channel / total_sessions)%&gt;% arrange(desc(Proportion_of_NoLeads)) ## # A tibble: 9 × 3 ## CHANNEL rows_by_channel Proportion_of_NoLeads ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Partner Marketing 27330 0.280 ## 2 Offline 20846 0.214 ## 3 SEM 17653 0.181 ## 4 SEO 12081 0.124 ## 5 CRM 10517 0.108 ## 6 Display 6585 0.0676 ## 7 Brand Marketing 1503 0.0154 ## 8 Social 961 0.00986 ## 9 Offline Direct Response 2 0.0000205 "],["enhancing-lead-monetization.html", "4 Enhancing Lead Monetization", " 4 Enhancing Lead Monetization Total revenue by product market_prod_matches %&gt;% group_by(CATEGORY_NAME) %&gt;% summarise(Revenue = sum(REVENUE)) %&gt;% arrange(desc(Revenue)) ## # A tibble: 6 × 2 ## CATEGORY_NAME Revenue ## &lt;chr&gt; &lt;dbl&gt; ## 1 Personal Loan 148806. ## 2 Home Equity 125432 ## 3 Mortgage Loan 112648 ## 4 Business Loan 106116. ## 5 Vehicle Loan 28408. ## 6 Credit Services 378 Revenue per lead by product shows which products are monetized the most and least effectively. market_prod_matches %&gt;% group_by(CATEGORY_NAME) %&gt;% summarise(Revenue_PerLead = sum(REVENUE)/n_distinct(LEAD_ID)) %&gt;% # number of sessions per channel arrange(desc(Revenue_PerLead)) ## # A tibble: 6 × 2 ## CATEGORY_NAME Revenue_PerLead ## &lt;chr&gt; &lt;dbl&gt; ## 1 Business Loan 198. ## 2 Home Equity 80.7 ## 3 Mortgage Loan 47.6 ## 4 Credit Services 18 ## 5 Personal Loan 12.4 ## 6 Vehicle Loan 10.8 #Areas for Improvement Now that I have identified which products generate the most revenue, I will explore the make up of products for all leads. total_refs &lt;- nrow(market_prod_matches) market_prod_matches %&gt;% group_by(CATEGORY_NAME) %&gt;% summarise(rows_by_cat = n()) %&gt;% mutate(Proportion_of_Total_Refs = rows_by_cat / total_refs) ## # A tibble: 6 × 3 ## CATEGORY_NAME rows_by_cat Proportion_of_Total_Refs ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Business Loan 1298 0.0223 ## 2 Credit Services 21 0.000361 ## 3 Home Equity 5368 0.0924 ## 4 Mortgage Loan 5635 0.0970 ## 5 Personal Loan 38425 0.661 ## 6 Vehicle Loan 7355 0.127 Proportion of products within each marketing channel. Distribution of products within each channel. total_rows_per_channel &lt;- market_prod_matches %&gt;% group_by(CHANNEL) %&gt;% summarise(Total_Rows = n()) # Calculate the product count for each category within each channel table &lt;- market_prod_matches %&gt;% group_by(CHANNEL, CATEGORY_NAME) %&gt;% summarise(Product_Count = n()) %&gt;% ungroup() %&gt;% left_join(total_rows_per_channel, by = &quot;CHANNEL&quot;) %&gt;% mutate(Proportion = Product_Count / Total_Rows) %&gt;% arrange(CHANNEL, desc(Product_Count)) ## `summarise()` has grouped output by &#39;CHANNEL&#39;. You can override using the ## `.groups` argument. table ## # A tibble: 45 × 5 ## CHANNEL CATEGORY_NAME Product_Count Total_Rows Proportion ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Brand Marketing Personal Loan 1974 2373 0.832 ## 2 Brand Marketing Vehicle Loan 205 2373 0.0864 ## 3 Brand Marketing Mortgage Loan 101 2373 0.0426 ## 4 Brand Marketing Home Equity 65 2373 0.0274 ## 5 Brand Marketing Business Loan 25 2373 0.0105 ## 6 Brand Marketing Credit Services 3 2373 0.00126 ## 7 CRM Personal Loan 11664 13284 0.878 ## 8 CRM Mortgage Loan 652 13284 0.0491 ## 9 CRM Home Equity 440 13284 0.0331 ## 10 CRM Vehicle Loan 415 13284 0.0312 ## # ℹ 35 more rows Proportion of products stratified by the associated marketing channel. Distribution of product counts within each category. total_rows_per_cat &lt;- market_prod_matches %&gt;% group_by(CATEGORY_NAME) %&gt;% summarise(Total_Rows = n()) market_prod_matches %&gt;% group_by(CATEGORY_NAME, CHANNEL) %&gt;% summarise(Product_Count = n()) %&gt;% ungroup() %&gt;% left_join(total_rows_per_cat, by = &quot;CATEGORY_NAME&quot;) %&gt;% mutate(Proportion = Product_Count / Total_Rows) %&gt;% arrange(CATEGORY_NAME, desc(Product_Count)) ## `summarise()` has grouped output by &#39;CATEGORY_NAME&#39;. You can override using the ## `.groups` argument. ## # A tibble: 45 × 5 ## CATEGORY_NAME CHANNEL Product_Count Total_Rows Proportion ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Business Loan SEM 697 1298 0.537 ## 2 Business Loan Partner Marketing 241 1298 0.186 ## 3 Business Loan Social 120 1298 0.0924 ## 4 Business Loan CRM 109 1298 0.0840 ## 5 Business Loan Offline 40 1298 0.0308 ## 6 Business Loan SEO 38 1298 0.0293 ## 7 Business Loan Display 28 1298 0.0216 ## 8 Business Loan Brand Marketing 25 1298 0.0193 ## 9 Credit Services SEM 10 21 0.476 ## 10 Credit Services CRM 4 21 0.190 ## # ℹ 35 more rows "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
